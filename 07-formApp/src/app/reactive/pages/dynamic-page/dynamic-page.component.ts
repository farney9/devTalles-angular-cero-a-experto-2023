import { Component } from '@angular/core';
import { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-dynamic-page',
  templateUrl: './dynamic-page.component.html',
  styles: ``
})
export class DynamicPageComponent {

  dynamicForm: FormGroup = this.fb.group({
    name: ['', [Validators.required, Validators.minLength(3)]],
    favoriteGames: this.fb.array([
      ['Metal Gear', Validators.required],
      ['Death Stranding', Validators.required],
    ]),
  })

  newFavorite: FormControl = new FormControl('', Validators.required);

  constructor(private fb: FormBuilder) { }

  get favoriteGames() {
    return this.dynamicForm.get('favoriteGames') as FormArray;
  }

  getFieldError(field: string): string {
    const errors = this.dynamicForm.controls[field]?.errors || {};

    const errorMessages = {
      required: 'This field is required.',
      minlength: (value: any) => `Must have minimum ${value.requiredLength} characters.`,
    };

    const firstErrorKey = Object.keys(errors)[0];
    switch (firstErrorKey) {
      case 'required':
        return errorMessages.required;
      case 'minlength':
        return errorMessages.minlength(errors[firstErrorKey]);
    }

    return '';
  }

  isvalidFieldinArray(formArray: FormArray, idx: number): boolean | null {
    return formArray.controls[idx].errors
      && formArray.controls[idx].touched;
  }

  isvalidField(field: string): boolean | null {
    return this.dynamicForm.controls[field].errors
      && this.dynamicForm.controls[field].touched;
  }

  addFavorite() {
    if (this.newFavorite.invalid) return;

    const newGame = this.newFavorite.value;

    this.favoriteGames.push(this.fb.control(newGame, Validators.required));

    this.newFavorite.reset()
    console.log(newGame);
  }

  onDeletefavorite(idx: number) {
    this.favoriteGames.removeAt(idx);
  }


  onSubmit() {
    if (this.dynamicForm.invalid) {
      this.dynamicForm.markAllAsTouched();
      return
    }
    console.log(this.dynamicForm.value);
    (this.dynamicForm.controls['favoriteGames'] as FormArray) = this.fb.array([]);
    this.dynamicForm.reset();
  }

  // Esta función se ejecuta cuando se presiona una tecla en el input
  onKeyPress(event: KeyboardEvent) {
    // Si la tecla es Enter, evitamos la acción predeterminada del navegador
    if (event.code === 'Enter') {
      /* Using `event.code` instead of `event.key` ensures that the code will work consistently across different browsers and operating systems. The `event.code` property represents the physical key being pressed, while `event.key` represents the character generated by the key. */
      event.preventDefault();
      event.stopPropagation();
      /*
      Adding `event.stopPropagation()` is important to prevent the event from propagating up the DOM tree. Without it, the event could trigger other event listeners on parent elements, potentially causing unintended behavior or conflicts with other functionality.
       */
      if (this.newFavorite.valid && this.newFavorite.value) {
        this.addFavorite();
      }
    }
  }

}
